# TODO(P0, devx): Migrate this to a server like Django or Flask, this SAM crap ain't working.
# Think of this like Terraform, but more crap. Only attempt to use core and necessary features.
# Given the fact his file is more comments and shitposting than logic, we gonna just make it a Server one day.
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  voxana edge function for non-trivial frontend calls (like voice uploads, not from PostgREST)

# Would be nice to set up Gateway Responses
Globals:
  # Api:
    # This seem to NOT work, you still need to go Resource -> Endpoint -> Enable CORS manually.
    # https://us-east-1.console.aws.amazon.com/apigateway/home?region=us-east-1#/apis/xz067dkee6/resources/9l1jo7/enable-cors
    # TODO(P2, learning): Nice to learn more about CORS, getting annoying vibes from my friends.
    # AWS Proxy Integration and CORS:
    # In the AWS API Gateway, CORS (Cross-Origin Resource Sharing) is not enabled by default.
    # It needs to be enabled manually for each method.
    # This allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser
    # should permit loading of resources.
    #
    # When a proxy integration is used (aws_proxy), the server (e.g., a Lambda function) behind it *must return*
    # the Access-Control-Allow-Origin header (and other Access-Control-* headers as needed) in the response.
    # The AWS API Gateway will not add these headers for you in a proxy integration,
    # as it passes the response from the backend service through to the client directly.
    # We *currently* use a non-proxy integration, so these would be applied.
    # BUT we can also do this in the Python code, where we have much more leeway (like to support multiple origins).
    # Cors:
    #  AllowOrigin: "'https://app.voxana.ai,http://localhost:3000'"
    #  AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    #  AllowMethods: "'GET,POST,OPTIONS'"
  Function:
    Timeout: 120
    MemorySize: 128

Resources:
#  DatabaseClientLayer:
#    Type: AWS::Serverless::LayerVersion
#    Metadata:
#      BuildMethod: python3.9
#      # TODO(P1, devx): I just couldn't make this work - so moving the logic to generate_models.sh
#      # To copy our database models to the Lambda layer, which can be then included.
#      # NOTE: This fails SILENTLY (great design) if the path is bad.
#      # To my best understanding this path is relative to sam_app/lambda_layers/database_client
#      # PreBuildCommands:
#      #  - echo "IS THIS COMMAND RUN?"
#      #  - cp -r ../../../../database ./python/database
#    Properties:
#      LayerName: DatabaseClientLayer
#      Description: DB Client Layer using peewee with our generated models
#      ContentUri: lambda_layers/database_client/
#      CompatibleRuntimes:
#        - python3.9

# TODO(P0, devx): Just generalize this to handle multiple endpoints as its SO MUCH PITA to set this up infra-as-code.
  VoiceUploadsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: upload_voice/
      Handler: app.lambda_handler
      Runtime: python3.9
#      Layers:
#        - !Ref DatabaseClientLayer  # TODO(P1, devx): Figure this out, currently we just bluntly copy the directory.
      Architectures:
        - x86_64
      # TIL, these are DIFFERENT from the "Attach Policy" list. SAM has a custom policy list. Google wins over ChatGpt.
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html
      # ALSO, manually attaching the policy will over-write it in the next deploy.
      Policies:
        - S3CrudPolicy:
            BucketName: requests-from-api-voxana
        # https://stackoverflow.com/questions/65777261/how-to-add-policy-to-access-secret-with-lambda-function-aws-sam
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: 'arn:aws:secretsmanager:us-east-1:831154875375:secret:prod/supabase/postgres_login_url-AvIn1c'
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: 'arn:aws:secretsmanager:us-east-1:831154875375:secret:prod/hubspot/client_secret-ApsPp3'
        # Some alternatives how to provide the secrets access (which i have tried and maybe failed).
        # - arn:aws:iam::831154875375:policy/SecretsManagerReadAllSecretsInThisAccountInThisRegion
            # Resource: 'arn:aws:secretsmanager:*:*:secret:prod/supabase/postgres-login-url*'
      # We have to explicitly specify the ENV variables as doing so manually would lead to over-writes.
      # Empirically verified that this seems to be NOT needed?! Maybe yes actually after clean SAM build.
      # Discussed more, seems like this is resolved at stack creation (build?).
      # Environment:
#        Variables:
#          POSTGRES_LOGIN_URL_FROM_ENV: !Sub '{{resolve:secretsmanager:prod/supabase/postgres-login-url:SecretString}}'
      Events:
        # Handle OPTIONS (and pre-flight) by Lambda, as API Gateway is too opinionated / restrictive.
        VoiceUploadsOptions:
          Type: Api
          Properties:
            Path: /upload/voice
            Method: options
        VoiceUploadsGet:
          Type: Api
          Properties:
            Path: /upload/voice
            Method: get
        VoiceUploadsPost:
          Type: Api
          Properties:
            Path: /upload/voice
            Method: post
        CallSetEmailPost:
          Type: Api
          Properties:
            Path: /call/set-email
            Method: post
        HubspotOauthRedirect:
          Type: Api
          Properties:
            Path: /hubspot/oauth/redirect
            Method: get
#            RestApiId:  # uf
#              Ref: VoxanaApi

#  VoxanaApi:
#    Type: AWS::Serverless::Api
#    Properties:
#      # TODO(P1, privacy): Fine for now as no PII is sent over wire, but currently we have Detailed logging enabled
#      #   for all events: this can be useful to troubleshoot APIs, but can result in logging sensitive data.
#      # https://us-east-1.console.aws.amazon.com/apigateway/home?region=us-east-1#/apis/xz067dkee6/stages/Prod
#      StageName: Prod
#      Cors: "'https://app.voxana.ai,http://localhost:3000'"
#      DefinitionBody:
#        swagger: '2.0'
#        info:
#          title: Voxana API
#        paths:
#          /upload/voice:
#            get:
#              x-amazon-apigateway-integration:
#                httpMethod: GET
#                type: aws_proxy
#                uri:
#                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VoiceUploadsFunction.Arn}/invocations

# TODO(P2, devops): This would be nice, BUT it requires specifying VoxanaApi which completely messed up things.
# While per-method throttling settings allow for control at the API endpoint level,
# usage plans in Amazon API Gateway provide an additional layer of control and functionality.
# There are several reasons why you might choose to use usage plans:
#        x-amazon-apigateway-usageplan:
#          name: VoxanaUsagePlan
#          description: A usage plan for Voxana API
#          apiStages:
#            - apiId:
#                Ref: VoxanaApi
#              stage: Prod
#          throttle:
#            burstLimit: 10
#            rateLimit: 1
#      MethodSettings:
#        - ResourcePath: "/*"
#          HttpMethod: "*"
#          ThrottlingBurstLimit: 10
#          ThrottlingRateLimit: 1

# TODO(P1, auth): Currently, this API is publicly accessible kinda anonymously so we just ThrottlingRateLimit: 86440/day
# https://chat.openai.com/share/eb21a02b-59f0-4852-8fd9-ca674b9e5fcb
#   We should somehow limit this.
# Best way likely:
#  MyCustomAuthorizerFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: custom_authorizer/
#      Handler: app.lambda_handler
#      Runtime: python3.9
# Alternative:
#   AWS WAF has per-IP or Lambda@Edge will add more complexity to your setup, and you might incur additional costs.
# If we ever want to export these beyond this SAM APP
#Outputs:
#  VoiceUploadsApi:
#    Description: "API Gateway endpoint URL for Prod stage for Voice Uploads function"
#    Value: !Sub "https://${VoxanaApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/upload/"
#  VoiceUploadsFunction:
#    Description: "Voice Uploads Lambda Function ARN"
#    Value: !GetAtt VoiceUploadsFunction.Arn
#  VoiceUploadsFunctionIamRole:
#    Description: "Implicit IAM Role created for Voice Uploads function"
#    Value: !GetAtt VoiceUploadsFunctionRole.Arn
